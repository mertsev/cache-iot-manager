Include MQTTOptions

/// The main class and public API for the <i>Cach√© Object Script</i> MQTT Client sample implementation (version: 0.9).
/// 
/// <p>For more information regarding the MQTT protocol visit the <a href="http://mqtt.org">MQTT Org.</a> website,
///  or examine the <a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html">OASIS</a> standard specification.</p>
/// 
/// <p>Fully functional to demonstrate all kind of MQTT Client activities, but not a fully-featured client.</p>
/// 
/// <p>There are a few known (and maybe some unknown) limitations:<ul>
/// <li>It's not prepared for SSL / TLS communication.</li>
/// <li>TCP/IP based only, cannot be used with web-socket based MQTT Brokers.</li>
/// <li>Communication of the <class>Net.MQTT.Client</class> and background <class>Net.MQTT.Agent</class> instances is limited to the
///  tasks to be done / completed. This could be enriched with for example status information of the Agent, which would make
///  it easier to monitor the background job from the Client interface and check its health status in certain scenarios.</li>
/// <li>Incoming and outgoing messages are simply logged into the <class>Net.MQTT.MessageStore</class> class. No any checks for
///  duplicate messages are done (when an incoming message is repeated by the Broker, due to a lost acknowledge).</li>
/// <li>For incoming QoS Level 2 messages no retry mechanism is implemented: if no <b><var>PUBREL</b></var> message would arrive
///  for the <b><var>PUBREC</b></var> acknowledge, the Agent will simply wait for it endless and the message remains in the 
///  <class>Net.MQTT.Auxiliary.MessageStatus</class>, registered with a <var>waiting for PUBREL</var> status.</li>
/// </ul></p>
/// <p>Questions, bug reports, recommendations are highly welcome to my <a href="mailto:Attila.Toth@InterSystems.com">Inbox</a>.</p>
Class Net.MQTT.Client Extends (%Persistent, %XML.Adaptor)
{

/// Host name of the MQTT Broker.
Property Host As %String [ InitialExpression = "localhost" ];

/// Port number of the MQTT Broker.
Property Port As %String [ InitialExpression = 1883 ];

/// SSL/TLS Configuration to be used to build a secured TCP Connection to the MQTT Broker.
Property SSLConfig As %String;

/// Timeout (in seconds) of building the TCP Connection to the MQTT Broker.
Property ConnectTimeout As %Integer [ InitialExpression = 10 ];

/// Generic default timeout for all kinds of action when either an incoming TCP communication is expected,
///  or the Client interface has to wait for the <class>Net.MQTT.Agent</class> to complete a task.
Property ReadTimeout As %Integer [ InitialExpression = 10 ];

/// The MQTT Broker may close the connection to the Client, if no requests are received within this interval (in seconds).
/// <p>It's the responsibility of the <class>Net.MQTT.Agent</class> to send a PING request at least in each intervals.</p>
Property KeepAliveInterval As %Integer [ InitialExpression = 60 ];

/// Identifies the Client at the MQTT Broker.
/// <p>This implementation is restricted multiple places to use unique Client IDs among the co-existing <class>Net.MQTT.Client</class>
///  instances within the same database. This restriction is acceptable, as the MQTT Brokers may reject multiple TCP connections 
///  with the same Client ID.</p>
Property ClientId As %String(MAXLEN = 23);

/// Sent with the <b><var>CONNECT</b></var> message to the MQTT Broker.
/// <p>For details see the MQTT standard specification.</p>
Property CleanSession As %Boolean [ InitialExpression = 1 ];

/// This object contains details of the "Last will and testament" of this Client - the message to be sent to subscribed Clients
///  from the MQTT Broker in case, when the Broker's connection to this Client would be closed / lost.
Property LastWill As Net.MQTT.Message;

/// Some QoS Level 1 and 2 messages (<b><var>PUBLISH</b></var>, <b><var>PUBREL</b></var>, <b><var>SUBSCRIBE</b></var>, <b><var>UNSUBSCIBE</b></var>)
///  might be re-sent by the Client if no appropriate acknowledge can be received from the MQTT Broker within the specified timout intervals.
/// <br/>This property controls the maximum number of repeated attempts.
Property Retry As %Integer [ InitialExpression = 2 ];

/// Some QoS Level 1 and 2 messages (<b><var>PUBLISH</b></var>, <b><var>PUBREL</b></var>, <b><var>SUBSCRIBE</b></var>, <b><var>UNSUBSCIBE</b></var>)
///  might be re-sent by the Client if no appropriate acknowledge can be received from the MQTT Broker within the specified timout intervals.
/// <br/>This property controls the wait interval (in seconds) within each repeated attempts.
Property RetryInterval As %Integer [ InitialExpression = 2 ];

/// User-defined method, which is called whenever the <class>Net.MQTT.Agent</class> receives an incoming message.
/// <p>The required format of the <property>OnMessage</property> property is: <var>Classname:MethodName</var>. 
/// A sample implementation is provided in the <class>Net.MQTT.MessageHandler</class>.</p>
/// 
/// <p>If this property is empty, doesn't contain a valid classname/method name or the message handler method throws a runtime error,
/// that event is logged in the <property>traceTarget</property> (if it's set).</p>
Property OnMessage As %String [ InitialExpression = "Net.MQTT.MessageHandler:OnMessage" ];

/// For debugging purposes this property can be set to any global variable names (e.g.: ^MQTT.Trace), 
///  in which case detailed trace information is logged into the specified global about the actions taken and also
///  the incoming and outgoing TCP communication.
Property traceTarget As %String;

Property trace As %Boolean [ Calculated ];

Method traceGet() As %Boolean [ CodeMode = expression ]
{
..traceTarget '= ""
}

/// The following settings are available to influence the content to be traced in the <property>traceTarget</property>:<ul>
/// <li><var>0</var> - no trace information</li>
/// <li><var>1</var> - errors only</li>
/// <li><var>2</var> - errors and warnings</li>
/// <li><var>3</var> - beyond errors and warnings, information about the actions made by the MQTT Client and Agent</li>
/// <li><var>4</var> - in this case even some originally temporary information is not deleted from auxiliary tables (e.g.: <class>Net.MQTT.Auxiliary.TaskList</li>
/// </ul> 
Property traceLevel As %Integer(DISPLAYLIST = ",notrace,error,warning,info,debug", VALUELIST = ",0,1,2,3,4") [ InitialExpression = 3, Required ];

/// <b>*** DEPRECATED ***:</b> Use <property>traceLevel</property> instead.
/// For debugging purposes this property can be set to 1, in which case some originally temporary information is not deleted from
///  auxiliary tables (for example: <class>Net.MQTT.Auxiliary.TaskList</class>). 
Property debugMode As %Integer [ InitialExpression = 0 ];

/// This property is a unique identifier of the <class>Net.MQTT.Client</class> and the related <class>Net.MQTT.Agent</class> instance,
///  and it is used in event-driven communication of the foreground Client and the background Agent processes.
/// <p>This is meant to be set automatically by the Client, do not set it directly!</p>
Property connectionId As %String [ InitialExpression = {$System.Util.CreateGUID()} ];

/// Do not manipulate this property, which should always contain the JOB id of the corresponding <class>Net.MQTT.Agent</class>.
Property agent As %String;

/// This is the first method to be called, in order to communicate with an MQTT Broker.
/// <p>Starts a <class>Net.MQTT.Agent</class> instance, which is responsible for building the TCP connection and 
///  managing the communication with the broker.</p>
Method StartAgent(pUsername As %String = "", pPassword As %String = "") As %Status
{
	Set tSC = $$$OK
	If ..agent '= "" {
		Set tSC = $$$ERROR($$$GeneralError, "MQTT Agent to <" _ ..Host _ ":" _ ..Port _ "> has already been started")
	}
	Else {
		Set tSC = ##class(Net.MQTT.Auxiliary.MessageCounter).CreateCounter(..ClientId)
		Set:$$$ISOK(tSC) tSC = ..XMLExportToString(.data, "root")
		If $$$ISOK(tSC) {
			Do $System.Event.Create("^MQTT.Connect(""" _ ..connectionId _ """)")
			JOB ##class(Net.MQTT.Agent).StartListening(data, pUsername, pPassword)
			Set ..agent = $ZChild
			Set ret = $System.Event.WaitMsg("^MQTT.Connect(""" _ ..connectionId _ """)", (..ConnectTimeout * 1.5))
			If $ListGet(ret, 1) < 1 {
				Set tSC = $$$ERROR($$$GeneralError, "MQTT Agent has not connected within the timeout period")
			}
			ElseIf $ListGet(ret, 2) '= "" {
				Set tSC = $$$ERROR($$$GeneralError, $ListGet(ret, 2))
			}
			
			If $$$ISERR(tSC) {
				Do ..KillAgent()
			}
		}
	}
	Quit tSC
}

/// Stops the Agent by sending <b><var>DISCONNECT</var></b> message and closing the TCP connection to the MQTT Broker.
/// <p>If this method completes successfully, the <class>Net.MQTT.Client</class> instance is re-usable and 
///  its <method>StartAgent</method> method can be called again.</p>
Method StopAgent() As %Status
{
	Set tSC = $$$OK
	If ..agent '= "" {
		Set ret = ##class(Net.MQTT.Auxiliary.TaskList).WaitTask(..connectionId, ..connectionId, "DISCONNECT", ..ConnectTimeout * 1.5, .tSC)
		If $$$ISOK(tSC) {
			If $ListGet(ret, 1) < 1 {
				Set tSC = $$$ERROR($$$GeneralError, "MQTT Agent has not disconnected within the timeout period")
			}
			ElseIf $ListGet(ret, 2) '= "" {
				Set tSC = $$$ERROR($$$GeneralError, $ListGet(ret, 2))
			}
		}
		
		Set tSC = $System.Status.AppendStatus(tSC, ..KillAgent())
	}
	
	Quit tSC
}

/// Normally this meant to be used only internally by the <method>StopAgent</method> method.
/// <p>In some rare cases, when the Agent cannot be stopped normally (by sending a <b><var>DISCONNECT</var></b> message),
///  this can still be used to terminate the Agent's background job and perform important maintenance steps.</p>
Method KillAgent() As %Status
{
	Set tSC = $$$OK
	If ..agent '= "" {
		Set ret = ##class(%SYSTEM.Process).Terminate(..agent, 0)
		If ret '= 1 {
			Set tSC = $$$ERROR($$$GeneralError, "MQTT Agent cannot be stopped in a clean way (status = " _ ret _ ")")
		}
		Set ..agent = ""
	}
	Set tSC = $System.Status.AppendStatus(tSC, ##class(Net.MQTT.Auxiliary.MessageCounter).DropCounter(..ClientId))

	// Re-initialize connection id for subsequent start of the Agent
	Set ..connectionId = $System.Util.CreateGUID()

	Quit tSC
}

/// Sends a request to the MQTT Broker to subsribe this client for a list of topics and controls the message flow:
/// <blockquote>
///  Sends the <b><var>SUBSCRIBE</var></b> message and if no <b><var>SUBACK</var></b> has been received in the timeout period,
///   it can retry the <b><var>SUBSCRIBE</var></b> according to the <property>Retry</property> and <property>RetryInterval</property> settings,
///   before giving up and returning with an error.
/// </blockquote>
/// <blockquote>
///  If the acknowledge is received, the <property>GrantedQoS</property> of each elements in the <var>pTopics</var> list should contain
///   the QoS Level assured by the MQTT broker for the corresponding topic. 
/// </blockquote>
/// <p>Usage example:</p>
/// <example>
/// Set tpc = ##class(Net.MQTT.Message).%New()
/// Set tpc.Topic = "$SYS/broker/load/bytes/#"
/// Set tpc.QoSLevel = 2
/// Set topics = ##class(%ListOfObjects).%New()
/// Do topics.Insert(tpc)
///  
/// Set client = ##class(Net.MQTT.Client).%New()
/// Set client.Host = "test.mosquitto.org"
/// Set client.ClientId = "My1stMQTTClient"
/// Set client.traceTarget = "^MQTT.Trace"
/// Set sc = client.StartAgent() If ('sc) { Do $System.OBJ.DisplayError(sc) }
/// Set sc = client.Subscribe(.topics) If ('sc) { Do $System.OBJ.DisplayError(sc) }
/// If (''sc) { Set t=topics.GetAt(1) Write "Topic:'"_t.Topic_"'; Expected QoS:"_t.QoSLevel_"; Granted QoS:"_t.GrantedQoS_";", ! }
/// ; wait a few seconds to receive some messages from the broker 
/// Set sc = client.Unsubscribe(.topics) If ('sc) { Do $System.OBJ.DisplayError(sc) }
/// Set sc = client.StopAgent() If ('sc) { Do $System.OBJ.DisplayError(sc) }
/// ZWrite ^MQTT.Trace
/// </example>
Method Subscribe(ByRef pTopics As %ListOfObjects(ELEMENTTYPE="Net.MQTT.Message")) As %Status
{
#dim sub As Net.MQTT.Auxiliary.Subscription
	If ..agent = "" {
		Quit $$$ERROR($$$GeneralError, "MQTT Agent to <" _ ..Host _ ":" _ ..Port _ "> has not been started yet")
	}
	If '$IsObject(pTopics) || (pTopics.Count() < 1) {
		Quit $$$ERROR($$$GeneralError, "At least one topic must be specified to subscribe for")
	}
	
	Set msgId = ##class(Net.MQTT.Auxiliary.MessageCounter).NextMessageId(..ClientId, .tSC)
	If $$$ISERR(tSC) {
		$$$MQTTTraceERR($System.Status.GetErrorText(tSC))
		Quit $$$ERROR($$$GeneralError, "Message ID for SUBSCRIBE message cannot be created")
	}
	
	TStart
	TRY {
		Set key = "", cnt = 0
		Set sub = ##class(Net.MQTT.Auxiliary.Subscription).CreateSubscription(..ClientId, msgId, .tSC)
		While $$$ISOK(tSC) {
			Set topic = pTopics.GetNext(.key) Quit:(key = "")
			Set tSC = sub.AddTopic(topic)
		}
	}
	CATCH ex {
		Set tSC = ex.AsStatus()
	}
	If $$$ISOK(tSC) { TCommit }
	Else { TRollback }
	
	Set retry = ..Retry, retcnt = 0, success = 0
	While $$$ISOK(tSC) && (success '= 1) {
		Set ret = ##class(Net.MQTT.Auxiliary.TaskList).WaitTask(..connectionId, msgId _ $Select(retcnt: ":" _ retcnt, 1: ""), "SUBSCRIBE", ..ReadTimeout, .tSC)
		If $$$ISOK(tSC) {
			If $ListGet(ret, 1) < 1 {
				Set tSC = $$$ERROR($$$GeneralError, "MQTT Agent has not succeeded within the timeout period (" _ $ListGet(ret, 1) _ ")")
			}
			ElseIf $ListGet(ret, 2) '= "" {
				Set tSC = $$$ERROR($$$GeneralError, $ListGet(ret, 2))
			}
			Else {
				Set ack = ##class(Net.MQTT.Auxiliary.TaskList).WaitAck(..connectionId, msgId, "SUBACK", ..ReadTimeout)
				Set success  = $ListGet(ack, 1)
				If (success = 0) && (retry > 0) {
					$$$MQTTTraceERR("MQTT Agent has not received acknowledge within the timeout period (remaining reties: " _ retry _ ")")
					Hang ..RetryInterval
					Set retry = retry - 1, retcnt = retcnt + 1
				}
				ElseIf success < 1 {
					Set tSC = $$$ERROR($$$GeneralError, "MQTT Agent has not received acknowledge within the timeout period (" _ success _ ")")
				}
				ElseIf $ListGet(ack, 2) '= "" {
					Set tSC = $$$ERROR($$$GeneralError, $ListGet(ack, 2))
				}
				Else {
					Set tSC = sub.RetrieveAck(.pTopics)
				}
			}
		}
	}
	
	If $IsObject(sub) {
		Set subid = sub.%Id(), sub = ""
		Set tSC = $System.Status.AppendStatus(tSC, ##class(Net.MQTT.Auxiliary.Subscription).DropSubscription(subid))
	}
	
	Quit tSC
}

/// Sends a request to the MQTT Broker to unsubsribe this client from a list of topics and controls the message flow:
/// <blockquote>
///  Sends the <b><var>UNSUBSCRIBE</var></b> message and if no <b><var>UNSUBACK</var></b> has been received in the timeout period,
///   it can retry the <b><var>UNSUBSCRIBE</var></b> according to the <property>Retry</property> and <property>RetryInterval</property> settings,
///   before giving up and returning with an error.
/// </blockquote>
/// <p>For usage example see the <method>Subscribe</method> method.</p>
Method Unsubscribe(ByRef pTopics As %ListOfObjects(ELEMENTTYPE="Net.MQTT.Message")) As %Status
{
#dim sub As Net.MQTT.Auxiliary.Subscription
	If ..agent = "" {
		Quit $$$ERROR($$$GeneralError, "MQTT Agent to <" _ ..Host _ ":" _ ..Port _ "> has not been started yet")
	}
	If '$IsObject(pTopics) || (pTopics.Count() < 1) {
		Quit $$$ERROR($$$GeneralError, "At least one topic must be specified to unsubscribe from")
	}
	
	Set msgId = ##class(Net.MQTT.Auxiliary.MessageCounter).NextMessageId(..ClientId, .tSC)
	If $$$ISERR(tSC) {
		$$$MQTTTraceERR($System.Status.GetErrorText(tSC))
		Quit $$$ERROR($$$GeneralError, "Message ID for UNSUBSCRIBE message cannot be created")
	}
	
	TStart
	TRY {
		Set key = "", cnt = 0
		Set sub = ##class(Net.MQTT.Auxiliary.Subscription).CreateSubscription(..ClientId, msgId, .tSC)
		While $$$ISOK(tSC) {
			Set topic = pTopics.GetNext(.key) Quit:(key = "")
			Set tSC = sub.AddTopic(topic)
		}
	}
	CATCH ex {
		Set tSC = ex.AsStatus()
	}
	If $$$ISOK(tSC) { TCommit }
	Else { TRollback }
	
	Set retry = ..Retry, retcnt = 0, success = 0
	While $$$ISOK(tSC) && (success '= 1) {
		Set ret = ##class(Net.MQTT.Auxiliary.TaskList).WaitTask(..connectionId, msgId _ $Select(retcnt: ":" _ retcnt, 1: ""), "UNSUBSCRIBE", ..ReadTimeout, .tSC)
		If $$$ISOK(tSC) {
			If $ListGet(ret, 1) < 1 {
				Set tSC = $$$ERROR($$$GeneralError, "MQTT Agent has not succeeded within the timeout period (" _ $ListGet(ret, 1) _ ")")
			}
			ElseIf $ListGet(ret, 2) '= "" {
				Set tSC = $$$ERROR($$$GeneralError, $ListGet(ret, 2))
			}
			Else {
				Set ack = ##class(Net.MQTT.Auxiliary.TaskList).WaitAck(..connectionId, msgId, "UNSUBACK", ..ReadTimeout)
				Set success  = $ListGet(ack, 1)
				If (success = 0) && (retry > 0) {
					$$$MQTTTraceERR("MQTT Agent has not received acknowledge within the timeout period (remaining reties: " _ retry _ ")")
					Hang ..RetryInterval
					Set retry = retry - 1, retcnt = retcnt + 1
				}
				If success < 1 {
					Set tSC = $$$ERROR($$$GeneralError, "MQTT Agent has not received acknowledge within the timeout period (" _ success _ ")")
				}
				ElseIf $ListGet(ack, 2) '= "" {
					Set tSC = $$$ERROR($$$GeneralError, $ListGet(ack, 2))
				}
			}
		}
	}
	
	If $IsObject(sub) {
		Set subid = sub.%Id(), sub = ""
		Set tSC = $System.Status.AppendStatus(tSC, ##class(Net.MQTT.Auxiliary.Subscription).DropSubscription(subid))
	}

	Quit tSC
}

/// Publishes a message to the MQTT Broker and (on QoS Level > 0) controls the message flow.
/// <p>In case of QoS = 1</p>
/// <blockquote>
///  Sends the <b><var>PUBLISH</var></b> message and if no <b><var>PUBACK</var></b> has been received in the timeout period,
///   it can retry the <b><var>PUBLISH</var></b> according to the <property>Retry</property> and <property>RetryInterval</property> settings,
///   before giving up and returning with an error.
/// </blockquote>
/// <p>In case of QoS = 2</p>
/// <blockquote>
///  Sends the <b><var>PUBLISH</var></b> message and if no <b><var>PUBREC</var></b> has been received in the timeout period,
///   it can retry the <b><var>PUBLISH</var></b> according to the <property>Retry</property> and <property>RetryInterval</property> settings,
///   before giving up and returning with an error.
/// </blockquote>
/// <blockquote>
///  After the <b><var>PUBREC</var></b> message has been received, it sends the <b><var>PUBREL</var></b> message 
///   and if no <b><var>PUBCOMP</var></b> has been received in the timeout period,
///   it can retry the <b><var>PUBREL</var></b> according to the <property>Retry</property> and <property>RetryInterval</property> settings,
///   before giving up and returning with an error.
/// </blockquote>
/// <p>Usage example:</p>
/// <example>
/// Set message = ##class(Net.MQTT.Message).%New()
/// Set message.Topic = "/isctest/client/sent"
/// Set message.Content = 1
/// Set message.QoSLevel = 2
///  
/// Set client = ##class(Net.MQTT.Client).%New()
/// Set client.Host = "test.mosquitto.org"
/// Set client.ClientId = "My1stMQTTClient"
/// Set client.traceTarget = "^MQTT.Trace"
/// Set sc = client.StartAgent() If ('sc) { Do $System.OBJ.DisplayError(sc) }
/// Set sc = client.Publish(message) If ('sc) { Do $System.OBJ.DisplayError(sc) }
/// Set sc = client.StopAgent() If ('sc) { Do $System.OBJ.DisplayError(sc) }
/// ZWrite ^MQTT.Trace
/// </example>
Method Publish(pMessage As Net.MQTT.Message) As %Status
{
	If ..agent = "" {
		Quit $$$ERROR($$$GeneralError, "MQTT Agent to <" _ ..Host _ ":" _ ..Port _ "> has not been started yet")
	}
	If '$IsObject(pMessage) {
		Quit $$$ERROR($$$GeneralError, "A message must be specified to publish")
	}
	
	Set tSC = $$$OK
	If pMessage.QoSLevel > 0 {
		Set pMessage.MessageId = ##class(Net.MQTT.Auxiliary.MessageCounter).NextMessageId(..ClientId, .tSC)
		Set:$$$ISOK(tSC) tSC = ##class(Net.MQTT.Auxiliary.MessageStatus).RegisterMessageOut(..ClientId, pMessage.MessageId)
	}
	If $$$ISERR(tSC) {
		$$$MQTTTraceERR($System.Status.GetErrorText(tSC))
		Quit $$$ERROR($$$GeneralError, "Message ID for PUBLISH message cannot be created")
	}
	
	Set msg				= ##class(Net.MQTT.MessageStore).%New()
	Set msg.ClientId	= ..ClientId
	Set msg.Direction	= "O"
	Set msg.MessageId	= pMessage.MessageId
	Set msg.QoSLevel	= pMessage.QoSLevel
	Set msg.Retain		= pMessage.Retain
	Set msg.Topic		= pMessage.Topic
	Set msg.Content		= pMessage.Content
	Set tSC = msg.%Save()
	
	Set retry = ..Retry, retcnt = 0, success = 0
	Set acktype = $Case(pMessage.QoSLevel, 2: "PUBREC", 1: "PUBACK", : "")
	While $$$ISOK(tSC) && (success '= 1) {
		Set ret = ##class(Net.MQTT.Auxiliary.TaskList).WaitTask(..connectionId, msg.%Id() _ $Select(retcnt: ":" _ retcnt, 1: ""), "PUBLISH", ..ReadTimeout, .tSC)
		If $$$ISOK(tSC) {
			If $ListGet(ret, 1) < 1 {
				Set tSC = $$$ERROR($$$GeneralError, "MQTT Agent has not succeeded within the timeout period (" _ $ListGet(ret, 1) _ ")")
			}
			ElseIf $ListGet(ret, 2) '= "" {
				Set tSC = $$$ERROR($$$GeneralError, $ListGet(ret, 2))
			}
			ElseIf pMessage.QoSLevel = 0 {
				Set success = 1
			}
			ElseIf pMessage.QoSLevel > 0 {
				Set ack = ##class(Net.MQTT.Auxiliary.TaskList).WaitAck(..connectionId, pMessage.MessageId, acktype, ..ReadTimeout)
				Set success  = $ListGet(ack, 1)
				If (success = 0) && (retry > 0) {
					$$$MQTTTraceERR("MQTT Agent has not received acknowledge within the timeout period (remaining reties: " _ retry _ ")")
					Hang ..RetryInterval
					Set retry = retry - 1, retcnt = retcnt + 1
				}
				If success < 1 {
					Set tSC = $$$ERROR($$$GeneralError, "MQTT Agent has not received acknowledge within the timeout period (" _ success _ ")")
				}
				ElseIf $ListGet(ack, 2) '= "" {
					Set tSC = $$$ERROR($$$GeneralError, $ListGet(ack, 2))
				}
				ElseIf pMessage.QoSLevel = 2 {
					Set tSC = ..PublishQoS2(pMessage.MessageId)
				}
			}
		}
	}
	
	Quit tSC
}

/// Internal method, used by <method>Publish</method> to manage the second pahse of QoS Level 2 message flow
/// (<b><var>PUBREL</var></b> message is sent and <b><var>PUBCOMP</var></b> is expected).
Method PublishQoS2(pMessageId As %String) As %Status [ Internal, Private ]
{
	Set tSC = $$$OK
	
	Set retry = ..Retry, retcnt = 0, success = 0
	While $$$ISOK(tSC) && (success '= 1) {
		Set ret = ##class(Net.MQTT.Auxiliary.TaskList).WaitTask(..connectionId, pMessageId _ $Select(retcnt: ":" _ retcnt, 1: ""), "PUBREL", ..ReadTimeout, .tSC)
		If $$$ISOK(tSC) {
			If $ListGet(ret, 1) < 1 {
				Set tSC = $$$ERROR($$$GeneralError, "MQTT Agent has not sent QoS=2 acknowledge within the timeout period (" _ $ListGet(ret, 1) _ ")")
			}
			ElseIf $ListGet(ret, 2) '= "" {
				Set tSC = $$$ERROR($$$GeneralError, $ListGet(ret, 2))
			}
			Else {
				Set ack = ##class(Net.MQTT.Auxiliary.TaskList).WaitAck(..connectionId, pMessageId, "PUBCOMP", ..ReadTimeout)
				Set success  = $ListGet(ack, 1)
				If (success = 0) && (retry > 0) {
					$$$MQTTTraceERR("MQTT Agent has not received QOS=2 acknowledge within the timeout period (remaining reties: " _ retry _ ")")
					Hang ..RetryInterval
					Set retry = retry - 1, retcnt = retcnt + 1
				}
				If success < 1 {
					Set tSC = $$$ERROR($$$GeneralError, "MQTT Agent has not received QOS=2 acknowledge within the timeout period (" _ success _ ")")
				}
				ElseIf $ListGet(ack, 2) '= "" {
					Set tSC = $$$ERROR($$$GeneralError, $ListGet(ack, 2))
				}
			}
		}
	}
	
	Quit tSC
}

Method GetProtocolName() As %String [ CodeMode = expression ]
{
..GetUTFString("MQIsdp")
}

Method GetProtocolVersion() As %String [ CodeMode = expression ]
{
$Char(3)
}

Method GetUTFString(pString As %String) As %String
{
	Quit ""
}

/// For maintenance purposes only! <b>USE WITH CARE!</b>
/// <p>If one of the message flows would break with unexpected error, the <class>Net.MQTT.Client</class> may leave
///  records behind in some auxiliary classes which can prevent the same <property>ClientId</property> to be used in a subsequent
///  execution of a <class>Net.MQTT.Client</class> instance.</p>
/// <p>This auxiliary method is responsible for clearing those records when needed.</p>
/// <p><b>WARNING:</b> if this is called while a <class>Net.MQTT.Agent</class> with the same Client ID is still active,
///  this may cause errors in the Agent, too. And stopping the Agent in a clear way (with sending a <b><var>DISCONNECT</var></b> message)
///  won't be possible any more. Use <method>KillAgent</method> in this case!</p>
ClassMethod ResetClient(pClientId As %String)
{
	Do ##class(Net.MQTT.Auxiliary.MessageCounter).%DeleteId(pClientId)
	&sql(DELETE FROM Net_MQTT_Auxiliary.Subscription WHERE ClientId = :pClientId)
	&sql(DELETE FROM Net_MQTT_Auxiliary.MessageStatus WHERE ClientId = :pClientId)
}

Storage Default
{
<Data name="ClientDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Host</Value>
</Value>
<Value name="3">
<Value>Port</Value>
</Value>
<Value name="4">
<Value>SSLConfig</Value>
</Value>
<Value name="5">
<Value>ConnectTimeout</Value>
</Value>
<Value name="6">
<Value>ReadTimeout</Value>
</Value>
<Value name="7">
<Value>KeepAliveInterval</Value>
</Value>
<Value name="8">
<Value>ClientId</Value>
</Value>
<Value name="9">
<Value>CleanSession</Value>
</Value>
<Value name="10">
<Value>LastWill</Value>
</Value>
<Value name="11">
<Value>Retry</Value>
</Value>
<Value name="12">
<Value>RetryInterval</Value>
</Value>
<Value name="13">
<Value>OnMessage</Value>
</Value>
<Value name="14">
<Value>traceTarget</Value>
</Value>
<Value name="15">
<Value>debugMode</Value>
</Value>
<Value name="16">
<Value>connectionId</Value>
</Value>
<Value name="17">
<Value>agent</Value>
</Value>
<Value name="18">
<Value>traceLevel</Value>
</Value>
</Data>
<DataLocation>^Net.MQTT.ClientD</DataLocation>
<DefaultData>ClientDefaultData</DefaultData>
<IdLocation>^Net.MQTT.ClientD</IdLocation>
<IndexLocation>^Net.MQTT.ClientI</IndexLocation>
<StreamLocation>^Net.MQTT.ClientS</StreamLocation>
<Type>%Library.CacheStorage</Type>
}

}

